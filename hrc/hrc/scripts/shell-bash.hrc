<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hrc PUBLIC "-//Cail Lomecb//DTD Colorer HRC take5//EN"
  "http://colorer.sf.net/2003/hrc.dtd">
<hrc version="take5"
     xmlns="http://colorer.sf.net/2003/hrc"
     xmlns:xinc="http://www.w3.org/2001/XInclude"
     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     xsi:schemaLocation="http://colorer.sf.net/2003/hrc http://colorer.sf.net/2003/hrc.xsd">

<annotation>
    <documentation>
        Shell Scripts (bash)

        Based on:
            https://www.gnu.org/software/bash/manual/bash.html
            This is Edition 5.2, last updated 19 September 2022

        Notes:
            - nested here-docs are not supported.
    </documentation>
    <contributors><![CDATA[
        Konstantin Kushnir <chpock@gmail.com>
    ]]></contributors>

    <appinfo>
        <prototype name="shell-bash" group="scripts" description="Shell script (bash)">
            <location link="scripts/shell-posix.hrc"/>
            <filename>/\.sh$/i</filename>
            <filename>/\.bash$/i</filename>
            <firstline weight='4'>/^\#(!\s*.+bash\b)/</firstline>
        </prototype>
    </appinfo>
</annotation>

<type name="shell-bash">

<import type="def"/>
<import type="shell-posix"/>

<region name="Text" parent="shell-posix:Text"/>
<region name="Comment" parent="shell-posix:Comment"/>
<region name="String"  parent="shell-posix:String"/>
<region name="Number"  parent="shell-posix:Number"/>
<region name="Operator" parent="shell-posix:Operator"/>
<region name="StringEscape" parent="shell-posix:StringEscape"/>
<region name="StringEdge" parent="shell-posix:StringEdge"/>
<region name="Variable" parent="shell-posix:Variable"/>
<region name="VariableSpecial" parent="shell-posix:VariableSpecial"/>
<region name="Symbol" parent="shell-posix:Symbol"/>
<region name="SymbolStrong" parent="shell-posix:SymbolStrong"/>
<region name="PairStart" parent="shell-posix:PairStart"/>
<region name="PairEnd" parent="shell-posix:PairEnd"/>
<region name="Error" parent="shell-posix:Error"/>
<region name="FunctionName" parent="shell-posix:FunctionName"/>
<region name="FunctionKeyword" parent="shell-posix:FunctionKeyword"/>
<region name="RedirectDescriptor" parent="shell-posix:RedirectDescriptor"/>
<region name="RedirectPrefix" parent="shell-posix:RedirectPrefix"/>
<region name="RedirectSymbol" parent="shell-posix:RedirectSymbol"/>
<region name="CommandPrefix" parent="shell-posix:CommandPrefix"/>
<region name="VariablePrefix" parent="shell-posix:VariablePrefix"/>
<region name="Insertion" parent="shell-posix:Insertion"/>
<region name="TestOperator" parent="shell-posix:TestOperator"/>
<region name="CommandReserved" parent="shell-posix:CommandReserved"/>
<region name="HeredocDescriptor" parent="shell-posix:HeredocDescriptor"/>
<region name="HeredocOperator" parent="shell-posix:HeredocOperator"/>
<region name="HeredocAnchor" parent="shell-posix:HeredocAnchor"/>
<region name="Heredoc" parent="shell-posix:Heredoc"/>
<region name="CommandBuiltin" parent="shell-posix:CommandBuiltin"/>

<!-- for testing -->
<region name="Test" parent="shell-posix:Test"/>
<region name="Test2" parent="shell-posix:Test2"/>

<entity name="word" value="[a-zA-Z_][\w_]*"/>
<entity name="var" value="%word;"/>
<entity name="specvar" value="
    CDPATH|HOME|IFS|MAIL|MAILPATH|OPTARG|OPTIND|PATH|PS1|PS2|
    _|BASH|BASHOPTS|BASHPID|BASH_ALIASES|BASH_ARGC|
    BASH_ARGV|BASH_ARGV0|BASH_CMDS|BASH_COMMAND|BASH_COMPAT|BASH_ENV|
    BASH_EXECUTION_STRING|BASH_LINENO|BASH_LOADABLES_PATH|BASH_REMATCH|
    BASH_SOURCE|BASH_SUBSHELL|BASH_VERSINFO|BASH_VERSION|BASH_XTRACEFD|
    CHILD_MAX|COLUMNS|COMP_CWORD|COMP_LINE|COMP_POINT|COMP_TYPE|COMP_KEY|
    COMP_WORDBREAKS|COMP_WORDS|COMPREPLY|COPROC|DIRSTACK|EMACS|ENV|EPOCHREALTIME|
    EPOCHSECONDS|EUID|EXECIGNORE|FCEDIT|FIGNORE|FUNCNAME|FUNCNEST|GLOBIGNORE|
    GROUPS|histchars|HISTCMD|HISTCONTROL|HISTFILE|HISTFILESIZE|HISTIGNORE|
    HISTSIZE|HISTTIMEFORMAT|HOSTFILE|HOSTNAME|HOSTTYPE|IGNOREEOF|INPUTRC|
    INSIDE_EMACS|LANG|LC_ALL|LC_COLLATE|LC_CTYPE|LC_MESSAGES|LC_NUMERIC|
    LC_TIME|LINENO|LINES|MACHTYPE|MAILCHECK|MAPFILE|OLDPWD|OPTERR|OSTYPE|
    PIPESTATUS|POSIXLY_CORRECT|PPID|PROMPT_COMMAND|PROMPT_DIRTRIM|PS0|PS3|PS4|
    PWD|RANDOM|READLINE_ARGUMENT|READLINE_LINE|READLINE_MARK|READLINE_POINT|
    REPLY|SECONDS|SHELL|SHELLOPTS|SHLVL|SRANDOM|TIMEFORMAT|TMOUT|TMPDIR|UID
"/>

<entity name="wrdbreakchars" value="|;#)&amp;`"/>
<entity name="wrdbreak" value="[%wrdbreakchars;]"/>
<entity name="wrdnotbreak" value="[^%wrdbreakchars;]"/>
<entity name="cmdbreak" value="%wrdbreak;|$"/>

<scheme name="shell-bash">
    <inherit scheme="shell-posix:shell-posix">
        <virtual scheme="shell-posix:variables" subst-scheme="variables"/>
        <virtual scheme="shell-posix:variable_assignments" subst-scheme="variable_assignments"/>
        <virtual scheme="shell-posix:for" subst-scheme="for"/>
        <virtual scheme="shell-posix:variable_names" subst-scheme="variable_names"/>
        <virtual scheme="shell-posix:strings" subst-scheme="strings"/>
        <virtual scheme="shell-posix:script_control" subst-scheme="script_control"/>
        <virtual scheme="shell-posix:script" subst-scheme="script"/>
    </inherit>
</scheme>

<scheme name="script">
    <inherit scheme="shell-posix:script">
        <virtual scheme="shell-posix:variables" subst-scheme="variables"/>
        <virtual scheme="shell-posix:variable_assignments" subst-scheme="variable_assignments"/>
        <virtual scheme="shell-posix:for" subst-scheme="for"/>
        <virtual scheme="shell-posix:variable_names" subst-scheme="variable_names"/>
        <virtual scheme="shell-posix:strings" subst-scheme="strings"/>
        <virtual scheme="shell-posix:script_control" subst-scheme="script_control"/>
    </inherit>
</scheme>

<scheme name="script_control">

    <!-- select ... done -->
    <block start="/\M\b(select)\b/" end="/\b(done)\b/" scheme="select"
        region01="PairStart" region10="PairEnd"
        region00="CommandReserved" region11="CommandReserved"/>

    <inherit scheme="shell-posix:script_control">
        <virtual scheme="shell-posix:variables" subst-scheme="variables"/>
        <virtual scheme="shell-posix:variable_assignments" subst-scheme="variable_assignments"/>
        <virtual scheme="shell-posix:for" subst-scheme="for"/>
        <virtual scheme="shell-posix:variable_names" subst-scheme="variable_names"/>
        <virtual scheme="shell-posix:strings" subst-scheme="strings"/>
    </inherit>

</scheme>

<scheme name="string-ansi-c">
    <regexp match="/\\(
        [abeEfnrtv\\&apos;&quot;?] |
        [0-7]{1,3} |
        x[0-9a-fA-F]{1,2} |
        u[0-9a-fA-F]{1,4} |
        U[0-9a-fA-F]{1,8} |
        cx
    )/x" region="StringEscape"/>
</scheme>

<scheme name="double_quoted_string">
    <block start="/\M\$[&apos;&quot;]/" end="//" scheme="strings-dollar"/>
    <inherit scheme="shell-posix:double_quoted_string">
        <virtual scheme="shell-posix:strings" subst-scheme="strings"/>
    </inherit>
</scheme>

<scheme name="strings-dollar">
    <!-- single quote strings -->
    <block start="/(\$&apos;)/" end="/(&apos;)/" region="String" scheme="string-ansi-c"
        region01="PairStart"  region11="PairEnd"
        region00="StringEdge" region10="StringEdge"/>
    <!-- locale-specific translations -->
    <block start="/(\$&quot;)/" end="/(&quot;)/" region="String" scheme="double_quoted_string"
        region01="PairStart"  region11="PairEnd"
        region00="StringEdge" region10="StringEdge"/>
</scheme>

<scheme name="strings">
    <inherit scheme="strings-dollar"/>
    <inherit scheme="shell-posix:strings"/>
</scheme>

<scheme name="parameter_expansion">
    <inherit scheme="shell-posix:parameter_expansion">
        <virtual scheme="shell-posix:strings" subst-scheme="strings"/>
    </inherit>
</scheme>

<scheme name="arithmetic_expansion">
    <inherit scheme="shell-posix:arithmetic_expansion">
        <virtual scheme="shell-posix:variables" subst-scheme="variables"/>
        <virtual scheme="shell-posix:variable_names" subst-scheme="variable_names"/>
        <virtual scheme="shell-posix:strings" subst-scheme="strings"/>
    </inherit>
</scheme>

<scheme name="script_words">
    <inherit scheme="shell-posix:script_words">
        <virtual scheme="shell-posix:strings" subst-scheme="strings"/>
    </inherit>
</scheme>

<scheme name="variable_names">
    <!-- plain special variable VAR -->
    <regexp match="/\b(?{VariableSpecial}(%specvar;)((\w)?!|$))\b/x"/>
    <inherit scheme="shell-posix:variable_names"/>
</scheme>

<scheme name="script_words.maybe-variable">
    <inherit scheme="shell-posix:script_words.maybe-variable">
        <virtual scheme="shell-posix:variable_names" subst-scheme="variable_names"/>
    </inherit>
</scheme>

<scheme name="variables">
    <!-- special variables -->
    <!-- $VAR -->
    <regexp match="/\$(%specvar;)((\w)?!|$)/x" region="VariableSpecial"/>
    <!-- ${VAR} -->
    <regexp match="/\$\{(%specvar;)\}/x" region="VariableSpecial"/>
    <!-- ${#VAR} -->
    <regexp match="/\$\{(\#)(%specvar;)\}/x" region="VariableSpecial" region1="VariablePrefix"/>
    <!-- ${VAR:-...}, ${VAR+...} etc. -->
    <block start="/(\$\{)(%specvar;)(:?[?=+-])/x" end="/(\})/" scheme="parameter_expansion"
        region00="VariableSpecial" region10="VariableSpecial" region03="VariablePrefix"
        region01="PairStart"       region11="PairEnd"/>
    <!-- ${VAR#...}, ${VAR%%...} etc. -->
    <block start="/(\$\{)(%specvar;)(\#{1,2}|\%{1,2})/x" end="/(\})/" scheme="parameter_expansion"
        region00="VariableSpecial"  region10="VariableSpecial" region03="VariablePrefix"
        region01="PairStart"        region11="PairEnd"/>
    <inherit scheme="shell-posix:variables">
        <virtual scheme="shell-posix:strings" subst-scheme="strings"/>
    </inherit>
</scheme>

<scheme name="variable_assignments">
    <!-- special variables -->
    <!-- variable assignment: var=<number> -->
    <regexp match="/\s*(%specvar;)(=)(\d+)\b/x" region1="VariableSpecial"
        region2="Symbol" region3="Number"/>
    <!-- variable assignment: var=<something> -->
    <block start="/\s*(%specvar;)(=)/x" end="/\M\s|%cmdbreak;/" scheme="script_words"
        region01="VariableSpecial" region02="Symbol"/>
    <inherit scheme="shell-posix:variable_assignments">
        <virtual scheme="shell-posix:strings" subst-scheme="strings"/>
    </inherit>
</scheme>

<scheme name="for-arithmetic">
    <block start="/((\(\()|;)/" end="/\M((\)\))|(?{SymbolStrong};))/" scheme="arithmetic_expansion"/>
</scheme>

<scheme name="for">
    <!-- for (( expr1 ; expr2 ; expr3 )) ... done -->
    <block start="/\b(for)\s+\M(\(\()/" end="/(\)\))\s*(?{Error}.*?)\M(;|#|$)/" scheme="for-arithmetic"
        region01="CommandReserved" region12="SymbolStrong"
        region02="PairStart"       region11="PairEnd"/>
    <inherit scheme="shell-posix:for">
        <virtual scheme="shell-posix:variable_names" subst-scheme="variable_names"/>
    </inherit>
</scheme>

<scheme name="select">
    <inherit scheme="comments"/>
    <!-- select VAR ... done -->
    <block start="/\b(select)\b\s*/" end="/\s*(?{Error}[^;#]*?)(\M(?{SymbolStrong};)|\bin\b|\s+|#|$)/"
        scheme="script_words.maybe-variable" region01="CommandReserved"/>
    <!-- in ... -->
    <block start="/\s*\b(in)\b/" end="/(;|#|$)/" scheme="script_words"
        region01="CommandReserved" region11="SymbolStrong"/>
    <!-- do ... done -->
    <block start="/\s*\b(do)\b/" end="/\s*\M\b(done)\b/" scheme="script"
        region01="CommandReserved" region11="CommandReserved"/>
    <!-- anything else is an error -->
    <block start="/(done)?!\s*\m/" end="/\M(%cmdbreak;)/" scheme="def:empty"
        region="Error" region11="SymbolStrong"/>
</scheme>

</type>
</hrc>

<!-- ***** BEGIN LICENSE BLOCK *****
   - Version: MPL 1.1/GPL 2.0/LGPL 2.1
   -
   - The contents of this file are subject to the Mozilla Public License Version
   - 1.1 (the "License"); you may not use this file except in compliance with
   - the License. You may obtain a copy of the License at
   - http://www.mozilla.org/MPL/
   -
   - Software distributed under the License is distributed on an "AS IS" basis,
   - WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
   - for the specific language governing rights and limitations under the
   - License.
   -
   - The Original Code is the Colorer Library.
   -
   - The Initial Developer of the Original Code is
   - Cail Lomecb <cail@nm.ru>.
   - Portions created by the Initial Developer are Copyright (C) 1999-2008
   - the Initial Developer. All Rights Reserved.
   -
   - Contributor(s):
   - Konstantin Kushnir <chpock@gmail.com>.
   -
   - Alternatively, the contents of this file may be used under the terms of
   - either the GNU General Public License Version 2 or later (the "GPL"), or
   - the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
   - in which case the provisions of the GPL or the LGPL are applicable instead
   - of those above. If you wish to allow use of your version of this file only
   - under the terms of either the GPL or the LGPL, and not to allow others to
   - use your version of this file under the terms of the MPL, indicate your
   - decision by deleting the provisions above and replace them with the notice
   - and other provisions required by the LGPL or the GPL. If you do not delete
   - the provisions above, a recipient may use your version of this file under
   - the terms of any one of the MPL, the GPL or the LGPL.
   -
   - ***** END LICENSE BLOCK ***** -->
